[{"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/index.tsx":"1","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/App.tsx":"2","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/routes.tsx":"3","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/client.ts":"4","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/cache.ts":"5","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/reactivities/countriesVariable.ts":"6","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/queries.ts":"7","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Card/Card.tsx":"8","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountriesList/CountriesList.tsx":"9","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryDetail/CountryDetail.tsx":"10","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryEdit/CountryEdit.tsx":"11","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Input/Input.tsx":"12","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Form/Form.tsx":"13","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Header/Header.tsx":"14"},{"size":289,"mtime":1607435751925,"results":"15","hashOfConfig":"16"},{"size":452,"mtime":1607435751630,"results":"17","hashOfConfig":"16"},{"size":802,"mtime":1607435752140,"results":"18","hashOfConfig":"16"},{"size":208,"mtime":1607435751659,"results":"19","hashOfConfig":"16"},{"size":773,"mtime":1607435751852,"results":"20","hashOfConfig":"16"},{"size":143,"mtime":1607435751905,"results":"21","hashOfConfig":"16"},{"size":377,"mtime":1607435751891,"results":"22","hashOfConfig":"16"},{"size":697,"mtime":1607435751694,"results":"23","hashOfConfig":"16"},{"size":1304,"mtime":1607435751977,"results":"24","hashOfConfig":"16"},{"size":2736,"mtime":1607435752025,"results":"25","hashOfConfig":"16"},{"size":1279,"mtime":1607435752095,"results":"26","hashOfConfig":"16"},{"size":405,"mtime":1607435751823,"results":"27","hashOfConfig":"16"},{"size":2837,"mtime":1607435751764,"results":"28","hashOfConfig":"16"},{"size":953,"mtime":1607435751794,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1asyvt2",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/index.tsx",[],["63","64"],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/App.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/routes.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/client.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/cache.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/reactivities/countriesVariable.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/queries.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Card/Card.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountriesList/CountriesList.tsx",["65"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { LIST } from '../../graphql/queries';\nimport { Country } from '../../models/country';\nimport Card from '../../components/Card/Card';\nimport Header from '../../components/Header/Header';\nimport { Link } from 'react-router-dom';\n\nfunction CountriesList() {\n  const [getCountryList, { error, loading, data }] = useLazyQuery(LIST, {\n    variables: { term: '' },\n  });\n\n  useEffect(() => {\n    getCountryList();\n  }, [getCountryList]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n  if (data.list.length === 0) {\n    return (\n      <p>\n        País não encontrado. Tente novamente. <br />\n        <Link to=\"/countries\">Voltar</Link>\n      </p>\n    );\n  }\n\n  function handleSearch(term: string) {\n    getCountryList({ variables: { term: term } });\n  }\n\n  return (\n    <div>\n      <Header hasSearch={true} handleSearch={handleSearch} />\n      <div className=\"countries-list-container\">\n        {data.list.map(\n          (country: Country, i: string | number | null | undefined) => (\n            <Card country={country} key={i} />\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CountriesList;\n","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryDetail/CountryDetail.tsx",["66","67"],"import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { DETAILS } from '../../graphql/queries';\nimport { Link } from 'react-router-dom';\nimport Header from '../../components/Header/Header';\nimport { FaArrowLeft } from 'react-icons/fa';\n\ninterface CountryDetailProps {\n  match: any;\n}\n\nconst CountryDetail: React.FC<CountryDetailProps> = ({ match }) => {\n  const [getCountry, { error, loading, data }] = useLazyQuery(DETAILS, {\n    variables: { id: match.params.id },\n  });\n\n  useEffect(() => {\n    getCountry();\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n  if (data.details.length === 0) {\n    return (\n      <p>\n        Country not found. Please try again. <br />\n        <Link to=\"/countries\">Voltar</Link>\n      </p>\n    );\n  }\n\n  const {\n    _id,\n    name,\n    flag,\n    capital,\n    area,\n    population,\n    topLevelDomains,\n  } = data.details;\n\n  return (\n    <div>\n      <Header hasSearch={false} />\n      <div className=\"country-detail-container\">\n        <Link className=\"country-detail-back-button\" to=\"/countries\">\n          <FaArrowLeft className=\"country-detail-back-button__icon\" />\n          Go back\n        </Link>\n        <div className=\"country-detail-content\">\n          <div className=\"country-detail-content-media\">\n            <img\n              className=\"country-detail-content-media-img\"\n              src={flag.svgFile}\n              alt={` Flag of ${name} `}\n            />\n          </div>\n          <div className=\"country-detail-content-info\">\n            <h2 className=\"country-detail-content-info__name\">{name}</h2>\n            <div className=\"country-detail-content-info-details\">\n              <h3 className=\"country-detail-content-info__title\">Capital</h3>\n              <p className=\"country-detail-content-info__value\">{capital}</p>\n              <h3 className=\"country-detail-content-info__title\">Area</h3>\n              <p className=\"country-detail-content-info__value\">{area}</p>\n              <h3 className=\"country-detail-content-info__title\">Population</h3>\n              <p className=\"country-detail-content-info__value\">{population}</p>\n              <h3 className=\"country-detail-content-info__title\">\n                Top level domain\n              </h3>\n              <p className=\"country-detail-content-info__value\">\n                {topLevelDomains[0].name}\n              </p>\n            </div>\n          </div>\n        </div>\n        <Link\n          className=\"country-detail-btn-edit\"\n          to={`/countries/edit/${match.params.id}`}\n        >\n          Edit\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryDetail;\n","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryEdit/CountryEdit.tsx",["68","69"],"import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { DETAILS } from '../../graphql/queries';\nimport { countriesVar } from '../../graphql/reactivities/countriesVariable';\nimport { Link } from 'react-router-dom';\nimport { Country } from '../../models/country';\nimport Form from '../../components/Form/Form';\nimport Header from '../../components/Header/Header';\n\ninterface CountryEditProps {\n  match: any;\n  history: any;\n}\n\nconst CountryEdit: React.FC<CountryEditProps> = ({ match, history }) => {\n  const [getCountry, { error, loading, data }] = useLazyQuery(DETAILS, {\n    variables: { id: match.params.id },\n  });\n\n  useEffect(() => {\n    getCountry();\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n\n  function handleEdit(editedCountry: Country) {\n    const newLocalData = countriesVar().map((item) => {\n      if (item._id === editedCountry._id) return editedCountry;\n      return item;\n    });\n\n    countriesVar([...newLocalData]);\n\n    history.push('/countries');\n  }\n\n  return (\n    <div>\n      <Header hasSearch={false} />\n      <Form country={data.details} handleEdit={handleEdit} />\n    </div>\n  );\n};\n\nexport default CountryEdit;\n","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Input/Input.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Form/Form.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Header/Header.tsx",["70"],"import React, { FormEvent, useState } from 'react';\nimport { FaSearch, FaArrowLeft } from 'react-icons/fa';\n\ninterface HeaderProps {\n  handleSearch?: Function;\n  hasSearch: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = ({ handleSearch, hasSearch }) => {\n  const [term, setTerm] = useState('');\n\n  function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n    if (handleSearch) {\n      handleSearch(term);\n    }\n  }\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">Country Finder</h1>\n      {hasSearch && (\n        <form action=\"#\" className=\"search\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"search__input\"\n            placeholder=\"Search Country\"\n            value={term}\n            onChange={(e) => setTerm(e.target.value)}\n          />\n          <FaSearch className=\"search__icon\" />\n        </form>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":28,"nodeType":"77","messageId":"78","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"80","line":19,"column":6,"nodeType":"81","endLine":19,"endColumn":8,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"83","line":34,"column":5,"nodeType":"77","messageId":"78","endLine":34,"endColumn":8},{"ruleId":"75","severity":1,"message":"84","line":5,"column":10,"nodeType":"77","messageId":"78","endLine":5,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":22,"column":6,"nodeType":"81","endLine":22,"endColumn":8,"suggestions":"85"},{"ruleId":"75","severity":1,"message":"86","line":2,"column":20,"nodeType":"77","messageId":"78","endLine":2,"endColumn":31},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCountry'. Either include it or remove the dependency array.","ArrayExpression",["89"],"'_id' is assigned a value but never used.","'Link' is defined but never used.",["90"],"'FaArrowLeft' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"91","fix":"93"},"Update the dependencies array to be: [getCountry]",{"range":"94","text":"95"},{"range":"96","text":"95"},[559,561],"[getCountry]",[704,706]]