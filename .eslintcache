[{"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/index.tsx":"1","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/App.tsx":"2","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/routes.tsx":"3","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/client.ts":"4","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/cache.ts":"5","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/reactivities/countriesVariable.ts":"6","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/queries.ts":"7","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Card/Card.tsx":"8","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountriesList/CountriesList.tsx":"9","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryDetail/CountryDetail.tsx":"10","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryEdit/CountryEdit.tsx":"11","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Input/Input.tsx":"12","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Form/Form.tsx":"13","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Header/Header.tsx":"14"},{"size":289,"mtime":1607047795731,"results":"15","hashOfConfig":"16"},{"size":463,"mtime":1607053764243,"results":"17","hashOfConfig":"16"},{"size":734,"mtime":1607201366067,"results":"18","hashOfConfig":"16"},{"size":207,"mtime":1607048006583,"results":"19","hashOfConfig":"16"},{"size":763,"mtime":1607085214296,"results":"20","hashOfConfig":"16"},{"size":140,"mtime":1607052343822,"results":"21","hashOfConfig":"16"},{"size":383,"mtime":1607085258854,"results":"22","hashOfConfig":"16"},{"size":737,"mtime":1607364555217,"results":"23","hashOfConfig":"16"},{"size":1282,"mtime":1607399251666,"results":"24","hashOfConfig":"16"},{"size":2707,"mtime":1607434619711,"results":"25","hashOfConfig":"16"},{"size":1278,"mtime":1607399241105,"results":"26","hashOfConfig":"16"},{"size":409,"mtime":1607200279792,"results":"27","hashOfConfig":"16"},{"size":2816,"mtime":1607398764800,"results":"28","hashOfConfig":"16"},{"size":958,"mtime":1607395127486,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1asyvt2",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/index.tsx",[],["63","64"],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/App.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/routes.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/client.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/cache.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/reactivities/countriesVariable.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/graphql/queries.ts",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Card/Card.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountriesList/CountriesList.tsx",["65"],"import React, { useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { LIST } from \"../../graphql/queries\";\nimport { Country } from \"../../models/country\";\nimport Card from \"../../components/Card/Card\";\nimport Header from \"../../components/Header/Header\";\nimport { Link } from \"react-router-dom\";\n\nfunction CountriesList() {\n  const [getCountryList, { error, loading, data }] = useLazyQuery(LIST, {\n    variables: { term: \"\" }\n  });\n\n  useEffect(() => {\n    getCountryList();\n  }, [getCountryList]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n  if (data.list.length === 0) {\n    return (\n      <p>\n        País não encontrado. Tente novamente. <br />\n        <Link to=\"/countries\">Voltar</Link>\n      </p>\n    );\n  }\n\n  function handleSearch(term: string) {\n    getCountryList({ variables: { term: term } });\n  }\n\n  return (\n    <div>\n      <Header hasSearch={true} handleSearch = { handleSearch }/>\n      <div className=\"countries-list-container\">\n        {data.list.map((country: Country, i: string | number | null | undefined) => (\n          <Card country={country} key={i} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CountriesList;\n","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryDetail/CountryDetail.tsx",["66","67"],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/pages/CountryEdit/CountryEdit.tsx",["68","69"],"import React, { useEffect } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { DETAILS } from \"../../graphql/queries\";\nimport { countriesVar } from \"../../graphql/reactivities/countriesVariable\";\nimport { Link } from \"react-router-dom\";\nimport { Country } from \"../../models/country\";\nimport Form from \"../../components/Form/Form\";\nimport Header from \"../../components/Header/Header\";\n\ninterface CountryEditProps {\n  match: any;\n  history: any;\n}\n\nconst CountryEdit: React.FC<CountryEditProps> = ({ match, history }) => {\n  const [getCountry, { error, loading, data }] = useLazyQuery(DETAILS, {\n    variables: { id: match.params.id }\n  });\n\n  \n\n  useEffect(() => {\n    getCountry();\n  }, []);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n\n  function handleEdit(editedCountry: Country) {\n    const newLocalData = countriesVar().map(item => {\n      if (item._id === editedCountry._id) return editedCountry;\n      return item;\n    });\n\n    countriesVar([...newLocalData]);\n\n    history.push(\"/countries\");\n  }\n\n  return (\n    <div>\n      <Header hasSearch={false}/>\n      <Form country={data.details} handleEdit={handleEdit}/>\n    </div>\n  );\n};\n\nexport default CountryEdit;\n","/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Input/Input.tsx",[],["70","71"],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Form/Form.tsx",[],"/Users/viniciusbarbosa/Projects/softplan-challenge/graph-countries-challenge/src/components/Header/Header.tsx",["72"],"import React, { FormEvent, useState } from \"react\";\nimport { FaSearch, FaArrowLeft } from \"react-icons/fa\";\n\ninterface HeaderProps {\n  handleSearch?: Function;\n  hasSearch: boolean\n}\n\nconst Header: React.FC<HeaderProps> = ({ handleSearch, hasSearch }) => {\n  const [term, setTerm] = useState('');\n\n  function handleSubmit(event: FormEvent) {\n      event.preventDefault();\n      if(handleSearch) {\n          handleSearch(term);\n      }\n  }\n\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">Country Finder</h1>\n      {hasSearch &&\n        <form action=\"#\" className=\"search\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"search__input\"\n            placeholder=\"Search Country\"\n            value={term}\n            onChange={(e) => setTerm(e.target.value)}\n          />\n          <FaSearch className=\"search__icon\" />\n        </form>\n      }\n    </header>\n  );\n};\n\nexport default Header;\n",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"82","line":19,"column":6,"nodeType":"83","endLine":19,"endColumn":8,"suggestions":"84"},{"ruleId":"77","severity":1,"message":"85","line":34,"column":5,"nodeType":"79","messageId":"80","endLine":34,"endColumn":8},{"ruleId":"77","severity":1,"message":"86","line":5,"column":10,"nodeType":"79","messageId":"80","endLine":5,"endColumn":14},{"ruleId":"81","severity":1,"message":"82","line":24,"column":6,"nodeType":"83","endLine":24,"endColumn":8,"suggestions":"87"},{"ruleId":"73","replacedBy":"88"},{"ruleId":"75","replacedBy":"89"},{"ruleId":"77","severity":1,"message":"90","line":2,"column":20,"nodeType":"79","messageId":"80","endLine":2,"endColumn":31},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCountry'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'_id' is assigned a value but never used.","'Link' is defined but never used.",["94"],["91"],["92"],"'FaArrowLeft' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},{"desc":"95","fix":"97"},"Update the dependencies array to be: [getCountry]",{"range":"98","text":"99"},{"range":"100","text":"99"},[558,560],"[getCountry]",[707,709]]