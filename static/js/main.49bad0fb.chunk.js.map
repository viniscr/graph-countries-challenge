{"version":3,"sources":["graphql/queries.ts","components/Card/Card.tsx","components/Header/Header.tsx","pages/CountriesList/CountriesList.tsx","pages/CountryDetail/CountryDetail.tsx","graphql/reactivities/countriesVariable.ts","components/Input/Input.tsx","components/Form/Form.tsx","pages/CountryEdit/CountryEdit.tsx","routes.tsx","App.tsx","graphql/cache.ts","client.ts","index.tsx"],"names":["GET_ALL_COUNTRIES","gql","LIST","DETAILS","Card","country","name","capital","flag","_id","className","data-testid","to","src","svgFile","alt","Header","handleSearch","hasSearch","useState","term","setTerm","action","onSubmit","event","preventDefault","type","placeholder","value","onChange","e","target","CountriesList","useLazyQuery","variables","getCountryList","error","loading","data","useEffect","undefined","list","lengh","lenght","map","i","CountryDetail","match","id","params","getCountry","details","length","area","population","topLevelDomains","countriesVar","makeVar","Input","label","rest","htmlFor","Form","handleEdit","setName","setFlag","setCapital","setArea","setPopulation","setTopLevelDomains","editedCountry","CountryEdit","history","newLocalData","item","push","Routes","path","exact","component","render","routeProps","App","useQuery","Country","InMemoryCache","typePolicies","Query","fields","read","_","filter","toLowerCase","indexOf","found","find","client","ApolloClient","uri","cache","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.49bad0fb.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_ALL_COUNTRIES = gql`\n  query {\n    Country {\n      _id\n      capital\n      name\n      flag {\n        svgFile\n      }\n      area\n      population\n      topLevelDomains {\n        name\n      }\n    }\n  }\n`;\n\nexport const LIST = gql`\n  query {\n    list @client\n  }\n`;\n\nexport const DETAILS = gql`\n  query {\n    details\n  }\n`;\n","import React from 'react';\nimport { Country } from '../../models/country';\nimport { Link } from 'react-router-dom';\n\ninterface CardProps {\n  country: Country;\n}\n\nconst Card: React.FC<CardProps> = ({ country }) => {\n  const { name, capital, flag, _id } = country;\n\n  return (\n    <article className=\"card\" data-testid=\"card\">\n      <Link to={`countries/${_id}`} data-testid=\"country-details\">\n        <div className=\"card__media\">\n          <img className=\"card__flag\" src={flag.svgFile} alt=\"Country Flag\" />\n        </div>\n        <div className=\"card__content\">\n          <h2 className=\"card__name\">{name}</h2>\n          <span className=\"card__capital\">{capital}</span>\n        </div>\n      </Link>\n    </article>\n  );\n};\n\nexport default Card;\n","import React, { FormEvent, useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\ninterface HeaderProps {\n  handleSearch?: Function;\n  hasSearch: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = ({ handleSearch, hasSearch }) => {\n  const [term, setTerm] = useState('');\n\n  function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n    if (handleSearch) {\n      handleSearch(term);\n    }\n  }\n\n  return (\n    <header className=\"header\" data-testid=\"header\">\n      <h1 className=\"header__title\" data-testid=\"header-title\">Country Finder</h1>\n      {hasSearch && (\n        <form action=\"#\" className=\"search\" onSubmit={handleSubmit} data-testid=\"header-search\">\n          <input\n            type=\"text\"\n            className=\"search__input\"\n            placeholder=\"Search Country\"\n            value={term}\n            onChange={(e) => setTerm(e.target.value)}\n          />\n          <FaSearch className=\"search__icon\" />\n        </form>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { LIST } from '../../graphql/queries';\nimport { Country } from '../../models/country';\nimport Card from '../../components/Card/Card';\nimport Header from '../../components/Header/Header';\nimport { Link } from 'react-router-dom';\n\nfunction CountriesList() {\n  const [getCountryList, { error, loading, data }] = useLazyQuery(LIST, {\n    variables: { term: '' },\n  });\n\n  useEffect(() => {\n    getCountryList();\n  },[getCountryList]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n \n\n  function handleSearch(term: string) {\n    getCountryList({ variables: { term: term } });\n  }\n\n  return (\n    <div>\n      <Header hasSearch={true} handleSearch={handleSearch} />\n      {\n        data.list.lengh === 0 && <p>Country not found. Please try again.</p>\n      }\n      <div className=\"countries-list-container\" data-testid=\"countries-list\">\n        {\n          data.list.lenght === 0 && <p>Country not found. Please try again.</p>\n        }\n        {data.list.map(\n          (country: Country, i: string | number | null | undefined) => (\n            <Card country={country} key={i} />\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default CountriesList;\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { DETAILS } from '../../graphql/queries';\nimport { Link } from 'react-router-dom';\nimport Header from '../../components/Header/Header';\nimport { FaArrowLeft } from 'react-icons/fa';\n\ninterface CountryDetailProps {\n  match: any;\n}\n\nconst CountryDetail: React.FC<CountryDetailProps> = ({ match }) => {\n  const [getCountry, { error, loading, data }] = useLazyQuery(DETAILS, {\n    variables: { id: match.params.id },\n  });\n\n  useEffect(() => {\n    getCountry();\n  },[getCountry]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n  if (data.details.length === 0) {\n    return (\n      <p>\n        Country not found. Please try again. <br />\n        <Link to=\"/countries\">Voltar</Link>\n      </p>\n    );\n  }\n\n  const {\n    name,\n    flag,\n    capital,\n    area,\n    population,\n    topLevelDomains,\n  } = data.details;\n\n  return (\n    <div>\n      <Header hasSearch={false} />\n      <div className=\"country-detail-container\" data-testid=\"country-detail\">\n        <Link className=\"country-detail-back-button\" to=\"/countries\">\n          <FaArrowLeft className=\"country-detail-back-button__icon\" />\n          Go back\n        </Link>\n        <div className=\"country-detail-content\">\n          <div className=\"country-detail-content-media\">\n            <img\n              className=\"country-detail-content-media-img\"\n              src={flag.svgFile}\n              alt={`Flag of ${name}`}\n            />\n          </div>\n          <div className=\"country-detail-content-info\">\n            <h2 className=\"country-detail-content-info__name\">{name}</h2>\n            <div className=\"country-detail-content-info-details\">\n              <h3 className=\"country-detail-content-info__title\">Capital</h3>\n              <p className=\"country-detail-content-info__value\">{capital}</p>\n              <h3 className=\"country-detail-content-info__title\">Area</h3>\n              <p className=\"country-detail-content-info__value\">{area} km²</p>\n              <h3 className=\"country-detail-content-info__title\">Population</h3>\n              <p className=\"country-detail-content-info__value\">{population} hab</p>\n              <h3 className=\"country-detail-content-info__title\">\n                Top level domain\n              </h3>\n              <p className=\"country-detail-content-info__value\">\n                {topLevelDomains[0].name}\n              </p>\n            </div>\n          </div>\n        </div>\n        <Link\n          className=\"country-detail-btn-edit\"\n          to={`/countries/edit/${match.params.id}`}\n        >\n          Edit\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryDetail;\n","import { makeVar } from '@apollo/client';\nimport { Country } from '../../models/country';\n\nexport const countriesVar = makeVar<Country[]>([]);\n","import React, { InputHTMLAttributes } from 'react';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  label: string;\n}\n\nconst Input: React.FC<InputProps> = ({ label, name, ...rest }) => {\n  return (\n    <div className=\"input-block\">\n      <label htmlFor={name}>{label}</label>\n      <input type=\"text\" id={name} {...rest}/>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { FormEvent, useState } from 'react';\nimport { Country } from '../../models/country';\nimport Input from '../Input/Input';\n\ninterface FormProps {\n  country: Country;\n  handleEdit?: any;\n}\n\nconst Form: React.FC<FormProps> = ({ country, handleEdit }) => {\n  const [name, setName] = useState<string>(country.name);\n  const [flag, setFlag] = useState<string>(country.flag.svgFile);\n  const [capital, setCapital] = useState<string>(country.capital);\n  const [area, setArea] = useState<number>(country.area);\n  const [population, setPopulation] = useState<number>(country.population);\n  const [topLevelDomains, setTopLevelDomains] = useState<string>(\n    country.topLevelDomains[0].name\n  );\n\n  function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n\n    const editedCountry = {\n      ...country,\n      name,\n      flag: { ...country.flag, svgFile: flag },\n      topLevelDomains: [\n        { ...country.topLevelDomains[0], name: topLevelDomains },\n      ],\n      capital,\n      area,\n      population,\n    };\n\n    handleEdit(editedCountry);\n  }\n  return (\n    <div className=\"country-edit-container\" data-testid=\"edit-container\">\n      <main>\n        <form className=\"country-edit-form\" onSubmit={handleSubmit}>\n          <fieldset>\n            <legend>Details</legend>\n            <Input\n              name=\"flag\"\n              label=\"Flag\"\n              value={flag}\n              onChange={(e) => {\n                setFlag(e.target.value);\n              }}\n              data-testid=\"edit-input-flag\"\n            />\n            <Input\n              name=\"name\"\n              label=\"Name\"\n              value={name}\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n              data-testid=\"edit-input-name\"\n            />\n\n            <Input\n              name=\"capital\"\n              type=\"text\"\n              label=\"Capital\"\n              value={capital}\n              onChange={(e) => {\n                setCapital(e.target.value);\n              }}\n              data-testid=\"edit-input-capital\"\n            />\n            <Input\n              name=\"area\"\n              label=\"Area\"\n              value={area}\n              type=\"number\"\n              onChange={(e) => {\n                setArea(e.target.value as any);\n              }}\n              data-testid=\"edit-input-area\"\n            />\n\n            <Input\n              name=\"population\"\n              type=\"number\"\n              label=\"Population\"\n              value={population}\n              onChange={(e) => {\n                setPopulation(e.target.value as any);\n              }}\n              data-testid=\"edit-input-population\"\n            />\n            <Input\n              name=\"topleveldomain\"\n              type=\"text\"\n              label=\"Top Level Domain\"\n              value={topLevelDomains}\n              onChange={(e) => {\n                setTopLevelDomains(e.target.value);\n              }}\n              data-testid=\"edit-input-topleveldomain\"\n            />\n            <button type=\"submit\">Save</button>\n          </fieldset>\n        </form>\n      </main>\n    </div>\n  );\n};\n\nexport default Form;\n","import React, { useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { DETAILS } from '../../graphql/queries';\nimport { countriesVar } from '../../graphql/reactivities/countriesVariable';\nimport { Country } from '../../models/country';\nimport Form from '../../components/Form/Form';\nimport Header from '../../components/Header/Header';\nimport { Link } from 'react-router-dom';\n\ninterface CountryEditProps {\n  match: any;\n  history: any;\n}\n\nconst CountryEdit: React.FC<CountryEditProps> = ({ match, history }) => {\n  const [getCountry, { error, loading, data }] = useLazyQuery(DETAILS, {\n    variables: { id: match.params.id },\n  });\n\n  useEffect(() => {\n    getCountry();\n  },[getCountry]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Failed :(</p>;\n  if (data === undefined) return <p>Loading...</p>;\n  if (data.details.length === 0) {\n    return (\n      <p>\n        Country not found. Please try again. <br />\n        <Link to=\"/countries\">Voltar</Link>\n      </p>\n    );\n  }\n\n  function handleEdit(editedCountry: Country) {\n    const newLocalData = countriesVar().map((item) => {\n      if (item._id === editedCountry._id) return editedCountry;\n      return item;\n    });\n\n    countriesVar([...newLocalData]);\n\n    history.push('/countries');\n  }\n\n  return (\n    <div data-testid=\"country-edit\">\n      <Header hasSearch={false} />\n      <Form country={data.details} handleEdit={handleEdit} />\n    </div>\n  );\n};\n\nexport default CountryEdit;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport CountriesList from './pages/CountriesList/CountriesList';\nimport CountryDetail from './pages/CountryDetail/CountryDetail';\nimport CountryEdit from './pages/CountryEdit/CountryEdit';\n\nfunction Routes() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/countries\" exact component={CountriesList} />\n        <Route\n          path=\"/countries/:id\"\n          exact\n          render={({ match }) => <CountryDetail match={match} />}\n        />\n        <Route\n          path=\"/countries/edit/:id\"\n          render={(routeProps) => <CountryEdit {...routeProps} />}\n        />\n        <Redirect to=\"/countries\" />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport './scss/index.scss';\nimport Routes from './routes';\n\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_COUNTRIES } from './graphql/queries';\nimport { countriesVar } from './graphql/reactivities/countriesVariable';\n\nfunction App() {\n  const { loading, data } = useQuery(GET_ALL_COUNTRIES);\n\n  if (loading) return <p>Loading ...</p>;\n\n  countriesVar(data.Country);\n\n  return <Routes />;\n}\n\nexport default App;\n","import { InMemoryCache } from '@apollo/client';\nimport { countriesVar } from './reactivities/countriesVariable';\n\nexport default new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        list: {\n          read(_, { variables }) {\n            return countriesVar().filter((item) => {\n              const name = item.name;\n              return (\n                name.toLowerCase().indexOf(variables!.term.toLowerCase()) >= 0\n              );\n            });\n          },\n        },\n        details: {\n          read(_, { variables }) {\n            const found = countriesVar().find(\n              (item) => item._id === variables!.id\n            );\n            if (found) return found;\n            return [];\n          },\n        },\n      },\n    },\n  },\n});\n","import { ApolloClient } from '@apollo/client';\nimport cache from './graphql/cache';\n\nconst client = new ApolloClient({\n  uri: 'https://countries-274616.ew.r.appspot.com',\n  cache,\n});\n\nexport default client;\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport client from './client';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}